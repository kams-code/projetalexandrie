<?php

namespace Erico\ApiBundle\Entity;

/**
 * PublicationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PublicationRepository extends \Doctrine\ORM\EntityRepository
{
	
	public function getPrevious($pId)
	{
		$qb = $this->createQueryBuilder('t')
			->select('t')

			// Filter texte.
			->where('t.id < :pId')
			->andwhere('t.publier = true')
			->setParameter(':pId', $pId)

			// Order by id.
			->orderBy('t.id', 'DESC')

			// Get the first record.
			->setFirstResult(0)
			->setMaxResults(1)
		;

		$result = $qb->getQuery()->getOneOrNullResult();
		
		return $result;
	}
	
	public function getNext($pId)
	{
		$qb = $this->createQueryBuilder('t')
			->select('t')
			
			// Filter texte.
			->where('t.id > :pId')
			->andwhere('t.publier = true')
			->andwhere('t.archiver = false')
			->setParameter(':pId', $pId)
			
			// Order by id.
			->orderBy('t.id', 'ASC')
			
			// Get the first record.
			->setFirstResult(0)
			->setMaxResults(1)
		;

		$result = $qb->getQuery()->getOneOrNullResult();
		
		return $result;
	}
	
	public function FindPubCat($idcat)
	{
	 
	  $query = $this->_em->createQuery('SELECT p FROM EricoApiBundle:Publication p JOIN p.categories c WHERE p.archiver = false AND p.publier = true AND c.id = :idc ORDER BY p.id DESC');
	  $query->setParameter('idc', $idcat);
	  /*$query->setFirstResult($first);
	  $query->setMaxResults($limit);// est l'équivalent de LIMIT en DQL */
      $resultats = $query->getResult();
	  
	  
      return $resultats;  
	}
	
	public function Search($char, $pub, $num, $op, $date1, $date2, $juridiction, $section, $nature)
	{
		$Publication = 'Publication'; 
		
		
		$condition = 'WHERE ( p.archiver = false and p.publier = true )';
			
		if($char != "")
		{
			$condition .= " AND  p.designation LIKE '%".$char."%'  ";
		}
		
		$datecondition="";
		
		if($op == "the" and $date1 != "")
		{
			
			$datecondition .= " AND p.dateLoi = '".$date1.'\' ';
		}
		
		if($op == "before" and $date1 != "")
		{
			$datecondition .= " AND p.dateLoi <= '".$date1.'\' ';
		}
		
		if($op == "after" and $date1 != "")
		{
			$datecondition .= " AND p.dateLoi >= '".$date1.'\' ';
		}
		
		if($op == "between" and $date1 != "" and $date2 != "")
		{
			$datecondition .= " AND p.dateLoi >= '".$date1."' AND p.dateLoi <= '".$date2.'\' ';
		}
		
		
		
		switch ($pub) // on indique sur quelle variable on travaille
		{ 
			case "loi": 

				$Publication = 'TexteLoi'; 
				
				if($num != "")
				{
					$condition .=" AND p.num LIKE '%".$num."%' ";
				}
				
				$condition .= $datecondition;
				
			break;
			
			case "jurisprudence": 
			
				$Publication = 'Jurisprudence'; 
				//échappement de l'appostrophe dans la chaine
				$juridiction = str_replace ("'", "''", $juridiction);
				$section = str_replace ("'", "''", $section);

				if($juridiction != "")
				$condition .=" AND p.nomTribunal = '".$juridiction."'"; 
				
			
				if($section != "")
				$condition .=" AND p.sectionTribunal = '".$section."'";
			
				if($nature != "")
				$condition .=" AND p.nature = '".$nature."'";
			
				
				if($num != "")
				{
					$condition .=" AND p.num LIKE '%".$num."%' ";
					
				}
				
				$condition .= $datecondition;
				
			break;
			
			case "doc": 
				$Publication = 'Document'; 
			break;
			
		}
		
		$query = $this->_em->createQuery('SELECT  p FROM EricoApiBundle:'.$Publication.' p '.$condition);
		
		//mb_convert_encoding(strip_tags ($pub->getDescription()), 'UTF-8', 'HTML-ENTITIES')
		
		//$queryparagraphe = $this->_em->createQuery("SELECT  p FROM EricoApiBundle:Paragraphe p WHERE p.description LIKE '%".$char."%' ");
	  
	  //$query = $this->_em->createQuery('SELECT  p FROM EricoApiBundle:Publication p  WHERE p.designation LIKE \'%'.$char.'%\' or p.description LIKE \'%'.$char.'%\'');
     
	  $resultats = $query->getResult();

      return $resultats;  
				
	}
}
